// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xmsg_head2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xmsg_5fhead2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xmsg_5fhead2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xmsg_5fhead2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xmsg_5fhead2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_xmsg_5fhead2_2eproto;
namespace xmsg {
class XMsgHead_2;
class XMsgHead_2DefaultTypeInternal;
extern XMsgHead_2DefaultTypeInternal _XMsgHead_2_default_instance_;
}  // namespace xmsg
PROTOBUF_NAMESPACE_OPEN
template<> ::xmsg::XMsgHead_2* Arena::CreateMaybeMessage<::xmsg::XMsgHead_2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xmsg {

// ===================================================================

class XMsgHead_2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xmsg.XMsgHead_2) */ {
 public:
  inline XMsgHead_2() : XMsgHead_2(nullptr) {};
  virtual ~XMsgHead_2();

  XMsgHead_2(const XMsgHead_2& from);
  XMsgHead_2(XMsgHead_2&& from) noexcept
    : XMsgHead_2() {
    *this = ::std::move(from);
  }

  inline XMsgHead_2& operator=(const XMsgHead_2& from) {
    CopyFrom(from);
    return *this;
  }
  inline XMsgHead_2& operator=(XMsgHead_2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const XMsgHead_2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XMsgHead_2* internal_default_instance() {
    return reinterpret_cast<const XMsgHead_2*>(
               &_XMsgHead_2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(XMsgHead_2& a, XMsgHead_2& b) {
    a.Swap(&b);
  }
  inline void Swap(XMsgHead_2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XMsgHead_2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XMsgHead_2* New() const final {
    return CreateMaybeMessage<XMsgHead_2>(nullptr);
  }

  XMsgHead_2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XMsgHead_2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const XMsgHead_2& from);
  void MergeFrom(const XMsgHead_2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XMsgHead_2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xmsg.XMsgHead_2";
  }
  protected:
  explicit XMsgHead_2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_xmsg_5fhead2_2eproto);
    return ::descriptor_table_xmsg_5fhead2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgStrFieldNumber = 2,
    kMsgSizeFieldNumber = 1,
    kMsgTypeFieldNumber = 3,
  };
  // string msg_str = 2;
  void clear_msg_str();
  const std::string& msg_str() const;
  void set_msg_str(const std::string& value);
  void set_msg_str(std::string&& value);
  void set_msg_str(const char* value);
  void set_msg_str(const char* value, size_t size);
  std::string* mutable_msg_str();
  std::string* release_msg_str();
  void set_allocated_msg_str(std::string* msg_str);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg_str();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg_str(
      std::string* msg_str);
  private:
  const std::string& _internal_msg_str() const;
  void _internal_set_msg_str(const std::string& value);
  std::string* _internal_mutable_msg_str();
  public:

  // int32 msg_size = 1;
  void clear_msg_size();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_size() const;
  void set_msg_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_size() const;
  void _internal_set_msg_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 msg_type = 3;
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:xmsg.XMsgHead_2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_str_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xmsg_5fhead2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XMsgHead_2

// int32 msg_size = 1;
inline void XMsgHead_2::clear_msg_size() {
  msg_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XMsgHead_2::_internal_msg_size() const {
  return msg_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XMsgHead_2::msg_size() const {
  // @@protoc_insertion_point(field_get:xmsg.XMsgHead_2.msg_size)
  return _internal_msg_size();
}
inline void XMsgHead_2::_internal_set_msg_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_size_ = value;
}
inline void XMsgHead_2::set_msg_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_size(value);
  // @@protoc_insertion_point(field_set:xmsg.XMsgHead_2.msg_size)
}

// string msg_str = 2;
inline void XMsgHead_2::clear_msg_str() {
  msg_str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& XMsgHead_2::msg_str() const {
  // @@protoc_insertion_point(field_get:xmsg.XMsgHead_2.msg_str)
  return _internal_msg_str();
}
inline void XMsgHead_2::set_msg_str(const std::string& value) {
  _internal_set_msg_str(value);
  // @@protoc_insertion_point(field_set:xmsg.XMsgHead_2.msg_str)
}
inline std::string* XMsgHead_2::mutable_msg_str() {
  // @@protoc_insertion_point(field_mutable:xmsg.XMsgHead_2.msg_str)
  return _internal_mutable_msg_str();
}
inline const std::string& XMsgHead_2::_internal_msg_str() const {
  return msg_str_.Get();
}
inline void XMsgHead_2::_internal_set_msg_str(const std::string& value) {
  
  msg_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void XMsgHead_2::set_msg_str(std::string&& value) {
  
  msg_str_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:xmsg.XMsgHead_2.msg_str)
}
inline void XMsgHead_2::set_msg_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:xmsg.XMsgHead_2.msg_str)
}
inline void XMsgHead_2::set_msg_str(const char* value,
    size_t size) {
  
  msg_str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:xmsg.XMsgHead_2.msg_str)
}
inline std::string* XMsgHead_2::_internal_mutable_msg_str() {
  
  return msg_str_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* XMsgHead_2::release_msg_str() {
  // @@protoc_insertion_point(field_release:xmsg.XMsgHead_2.msg_str)
  return msg_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void XMsgHead_2::set_allocated_msg_str(std::string* msg_str) {
  if (msg_str != nullptr) {
    
  } else {
    
  }
  msg_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:xmsg.XMsgHead_2.msg_str)
}
inline std::string* XMsgHead_2::unsafe_arena_release_msg_str() {
  // @@protoc_insertion_point(field_unsafe_arena_release:xmsg.XMsgHead_2.msg_str)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_str_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void XMsgHead_2::unsafe_arena_set_allocated_msg_str(
    std::string* msg_str) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg_str != nullptr) {
    
  } else {
    
  }
  msg_str_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg_str, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:xmsg.XMsgHead_2.msg_str)
}

// int32 msg_type = 3;
inline void XMsgHead_2::clear_msg_type() {
  msg_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XMsgHead_2::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 XMsgHead_2::msg_type() const {
  // @@protoc_insertion_point(field_get:xmsg.XMsgHead_2.msg_type)
  return _internal_msg_type();
}
inline void XMsgHead_2::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_type_ = value;
}
inline void XMsgHead_2::set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:xmsg.XMsgHead_2.msg_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace xmsg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xmsg_5fhead2_2eproto
